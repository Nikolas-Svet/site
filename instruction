Создание сайта:
python3 -m venv venv (создания виртуального окружения)
source venv/bin/activate (активация виртуального окружения)
deactivate (отключение виртуального окружения)
django-admin startproject collsite_test (создание ядра сайта)
python manage startapp men (создание приложения в сайте)
Для создания приложения нужно:
    В settings.py зайти в массив INSTALLED_APPS и добавить men.apps.MenConfig

Для создания функций в файле views нужно:
    from django.http import HttpResponse
    def home(request):
        return HttpResponse(f'<h1>Главная страница</h1>')

Для файла urls нужно:
    from men.views import home
    path('men/', home),

База данных:

createdb website (Создание базы данных)
psql (Вход в интерфес БД)
\l (Выводит список всех БД)
\q (Выход)
dropdb website (Удаление базы данных)
\du (Список пользователей)
ALTER USER postgres WITH PASSWORD '4002'; (Поменять пароль у пользователя)
CREATE USER username WITH PASSWORD 'password'; (Создание пользователя)
ALTER USER username WITH SUPERUSER; (Выдать права пользователю)
DROP USER username; (Удалить пользователя из БД)

python3 manage.py migrate (подключение к базе данных)
Eще нужно в файле settings.py в переменной DATABASE изменить данные


Для миграции базы данных нужно:

В файле models.py создать класс, например:
class Men(models.Model):
    title = models.CharField(max_length=255)
    content = models.TextField(blank=True)
    photo = models.ImageField(upload_to="photos/%Y/%m/%d/")
    time_create = models.DateTimeField(auto_now_add=True) Переменная присваивает дату создания класса
    time_update = models.DateTimeField(auto_now=True) Присваивает дату последнего изменения
    is_published = models.BooleanField(default=True)

Далее создать константы MEDIA_ROOT и MEDIA_URL, например:
MEDIA_ROOT = os.path.join(BASE_DIR, 'media') #4 урок, константы
MEDIA_URL = '/media/'

Это для статических данных:
if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root = settings.MEDIA_ROOT)

python manage.py makemigrate (создаем миграцию в папке migrations)

python manage.py sqlmigrate men 0001 (мигрируем данные в СУБД)

python manage.py migrate (сохраняем данные в СУБД)


ORM по работе с моделями

python manage.py shell (заходим в консоль для управления с СУБД: создание класса)
from men.models import Men (В первую очередь пишем)
Men("123", "456", и тд) создаем класс
w1 = _ (Нижнее подчеркивание присваивает к переменной последнее действие, то есть класс)
w1.save() (Сохраняем в таблицу СУБД)

можно обращаться к свойствам класса:
w1.id = w1.pk (Оба выводят индекс класса в таблице)

Можно посмотреть последние sql запросы:
from django.db import connection
connection.queries (Выводит последние sql запросы)


objects - статический объект
Men.objects (ссылка на класс Manager)
w3 = Men.objects.create("123", "456") создает класс и сразу же сохраняет в СУБД
Заменяет w3 = Men(...), w3.save()

Men.objects.all() (Выводит все записи таблицы СУБД, выводит информацию
об объектах класса, вызывая функцию __str__)

Например: в классе можно написать свойсвто __str__:
    def __str__(self):
        return self.title
При вызове Men.objects.all() будет выводить указанное выше в return
(После добавления свойства в класс, чтобы заработало в терминале, нужно перезайти в него)

exit() Выход с терминала СУБД

Также после вызова Men.objects.all() можно сохранить все данные таблицы в список w = _

Men.objects.filter(pk=1)
Men.objects.filter(title='Светкин Никита Евгеньевич') Поиск определенного объекта и атрибута
Оператор WHERE

<имя атрибута>__gte = <число> (Он ищет в таблице тех, у кого <имя атрибута> >= <число>)
Например:
Men.objects.filter(pk__gte=1) (Он выведет всех у кого pk > = 1)

<имя атрибута>__lte = <число> (В этом случае меньше или равно)

Men.objects.exclude(pk=2) (Выведет всех пользователей кроме pk = 2)

Men.objects.get(pk = 1) отличается от filter тем, что он не может выводить список, если найдено
несколько атрибутов, то он сгенерирует исключение

Men.objects.filter(pk__lte = 3).order_by('title') order_by сортирует по тому зачению, которое задано в скобках

order_by('-title') если добавить минус в title, то будет сортировка в обратном порядке


wu = Men.objects.get(pk = 1)
wu.title = "Светкин Никита"
wu.save()
Так мы присваиваем новые значения в объект класса
wu.delete() удаляет объект


TEMPLATES

Шаблоны создаются в приложении в ручную:
создается папка templates и в этой папке создается еще одна папка men для того, чтобы
избежать одинаковых названий файлов, когда будут импортироваться шаблоны, то будет браться папка men

Также создается отдельный html файл base, чтобы оттуда импортировать базовый html шаблон в другие html
файлы для избежание повтора

Для импортирование данных из базы данных нужно:
В файле views
from .models import *
def home(request):
    posts = Men.objects.all()
    return render(request, 'men/index.html', {'posts': posts, 'menu': menu,'title': 'Главная страница'})



Статические файлы:
<!--		autoescape нужно для экранирования тегов, то есть, если в базе данных мы добавим теги,
		то они будут выводится как текст. Эта функция позволяет читать теги, записанные в БД-->
<!--		linebreaks функция деления текста на абзацы через|
		truncatewords:50(любое число) выводит только 50 слов текста, если текст большой-->















